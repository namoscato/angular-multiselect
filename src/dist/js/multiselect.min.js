(function(){"use strict";angular.module("amo.multiselect",[])})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdownMenu",MultiselectDropdownMenuDirective);function MultiselectDropdownMenuDirective(){return{link:link,restrict:"A",scope:{onToggle:"&"}};function link(scope,element,attrs){element.on("click",".dropdown-menu",function(e){e.stopPropagation()});element.on("show.bs.dropdown",function(e){scope.onToggle({open:true})});element.on("hide.bs.dropdown",function(e){scope.onToggle({open:false})})}}})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselectDropdown",MultiselectDropdownDirective);function MultiselectDropdownDirective(){return{link:link,restrict:"E",templateUrl:"multiselect/multiselect-dropdown.html"};function link(scope,element,attrs){var self=scope.multiselectDropdown;self.deselectAll=deselectAll;self.toggleSelectedState=toggleSelectedState;function deselectAll(){self.options.forEach(function(option){option.selected=false});self.exposeSelectedOptions()}function toggleSelectedState(option){option.selected=!option.selected;self.exposeSelectedOptions()}}}})();(function(){"use strict";angular.module("amo.multiselect").filter("amoMultiselectGroup",AmoMultiselectGroupFilter);function AmoMultiselectGroupFilter(){function groupingFilter(options,group){var output=[];options.forEach(function(option){if(option.group===group){output.push(option)}});return output}return groupingFilter}})();(function(){"use strict";angular.module("amo.multiselect").directive("amoMultiselect",MultiselectDirective);function MultiselectDirective($compile,$filter,$parse,$timeout,AmoMultiselectFactory){return{link:link,replace:true,restrict:"E",require:"ngModel"};function link(parentScope,element,attrs,ngModelController){var _exposeLabel=attrs.label?$parse(attrs.label):angular.noop,_groupsHash={},_isInternalChange,_labels=[],_onChange=attrs.onChange?$parse(attrs.onChange):angular.noop,_onToggleDropdown=attrs.onToggleDropdown?$parse(attrs.onToggleDropdown):angular.noop,_selectedOptions=[];var multiselect=new AmoMultiselectFactory(attrs.options,parentScope),scope=parentScope.$new(),self={};scope.multiselectDropdown=self;self.identifier=attrs.id;self.groups=[];self.options=[];self.search={};self.text={deselectAll:attrs.deselectAllText||"Deselect All",search:attrs.searchText||"Search..."};self.exposeSelectedOptions=exposeSelectedOptions;self.getSelectedCount=getSelectedCount;self.hasSelectedItems=hasSelectedItems;self.hasSelectedMultipleItems=hasSelectedMultipleItems;self.isGrouped=multiselect.isGrouped();self.isGroupEmpty=isGroupEmpty;self.onToggleDropdown=onToggleDropdown;initialize();function addLabel(option){_labels.push(multiselect.getLabel(option))}function exposeOptions(){var i,selected,value;_groupsHash={};self.groups.length=0;_labels.length=0;self.options.length=0;multiselect.getOptions().forEach(function(option,index){selected=false;value=multiselect.getValue(option);for(i=0;i<_selectedOptions.length;i++){if(angular.equals(_selectedOptions[i],value)){selected=true;addLabel(option);break}}var optionObj={id:index,label:multiselect.getLabel(option),value:value,selected:selected};if(self.isGrouped){optionObj.group=multiselect.getGroup(option)}else{optionObj.group="ungrouped"}if(angular.isUndefined(_groupsHash[optionObj.group])){self.groups.push(optionObj.group);_groupsHash[optionObj.group]=true}self.options.push(optionObj)});setSelectedLabel()}function exposeSelectedOptions(){var option;_labels.length=0;_selectedOptions.length=0;self.options.forEach(function(optionModel,index){if(!optionModel.selected){return}option=multiselect.getOption(index);addLabel(option);_selectedOptions.push(multiselect.getValue(option))});_isInternalChange=true;ngModelController.$setViewValue(_selectedOptions);_onChange(scope,{label:setSelectedLabel()})}function getSelectedCount(){return _selectedOptions.length}function initialize(){element.append($compile("<amo-multiselect-dropdown></amo-multiselect-dropdown>")(scope));parentScope.$on("$destroy",function(){scope.$destroy()});parentScope.$watch(multiselect.getOptionsExpression(),function(options){multiselect.setOptions(options);exposeOptions()},true);parentScope.$watch(function(){return ngModelController.$modelValue},function(modelValue){if(_isInternalChange){_isInternalChange=false;return}if(angular.isArray(modelValue)){_selectedOptions=modelValue}exposeOptions()},true)}function isGroupEmpty(group){return $filter("amoMultiselectGroup")($filter("filter")(self.options,self.search),group).length===0}function hasSelectedItems(){return _selectedOptions.length>0}function hasSelectedMultipleItems(){return _selectedOptions.length>1}function onToggleDropdown(isOpen){if(!isOpen){$timeout(function(){self.search={}})}_onToggleDropdown(scope,{isOpen:isOpen})}function setSelectedLabel(){var label=attrs.selectText||"Select...",lastLabel;if(_labels.length>0){if(angular.isDefined(_labels[0])){if(_labels.length===1){label=_labels[0]}else{lastLabel=_labels.pop();label=_labels.join(", ");if(_labels.length>1){label+=","}label+=" and "+lastLabel}}else{label=_labels.length+" ";if(_labels.length===1){label+=attrs.selectedSuffixSingularText||"item"}else{label+=attrs.selectedSuffixText||attrs.selectedSuffixSingularText||"items"}}}self.selectedLabel=label;if(angular.isFunction(_exposeLabel.assign)){_exposeLabel.assign(parentScope,label)}return label}}}})();(function(){"use strict";angular.module("amo.multiselect").factory("AmoMultiselectFactory",MultiselectFactory);function MultiselectFactory($parse){var _optionsRegularExpression=/^\s*(?:(\S+)\s+as\s+)?(\S+)(?:\s+group\s+by\s+(\S+?))?\s+for\s+(\S+)\s+in\s+(\S+)\s*$/;return function MultiselectFactoryConstructor(options,scope){var self=this;var _parse;self.getGroup=getGroup;self.getLabel=getLabel;self.getOption=getOption;self.getOptionsExpression=getOptionsExpression;self.getOptions=getOptions;self.getValue=getValue;self.isGrouped=isGrouped;self.setOptions=setOptions;initialize();function getGroup(option){return option[_parse.groupByExpression]}function getLabel(option){return _parse.labelFunction(scope,getLocals(option))}function getLocals(option){var locals={};locals[_parse.value]=option;return locals}function getOption(index){return _parse.options[index]}function getOptionsExpression(){return _parse.optionsExpression}function getOptions(){return _parse.options}function getValue(option){return _parse.selectFunction(scope,getLocals(option))}function isGrouped(){return angular.isDefined(_parse.groupByExpression)}function initialize(){var expression=options.match(_optionsRegularExpression);if(expression===null){throw new Error('Expected "'+options+'" to be in form of "[_select_ as] [group by _groupByExpression_] _label_ for _value_ in _array_"')}_parse={groupByExpression:expression[3],labelFunction:$parse(expression[2]),optionsExpression:expression[5],selectFunction:$parse(angular.isDefined(expression[1])?expression[1]:expression[4]),value:expression[4]}}function setOptions(options){if(!angular.isArray(options)){throw new Error('Expected "'+_parse.optionsExpression+'" to be Array')}_parse.options=options;return _parse.options}return self}}})();angular.module("amo.multiselect").run(["$templateCache",function($templateCache){$templateCache.put("multiselect/multiselect-dropdown.html",'<div\n    amo-multiselect-dropdown-menu\n    class="btn-group btn-group-multiselect dropdown"\n    ng-attr-title="{{ multiselectDropdown.selectedLabel }}"\n    ng-class="{ \'state-selected-multiple\': multiselectDropdown.hasSelectedMultipleItems() }"\n    on-toggle="multiselectDropdown.onToggleDropdown(open)">\n    <button\n        type="button"\n        class="btn btn-default dropdown-toggle"\n        data-toggle="dropdown"\n        ng-attr-data-beh="multiselect-{{ multiselectDropdown.identifier }}">\n        <span class="text" ng-bind="multiselectDropdown.selectedLabel"></span>\n        <span class="badge" ng-bind="multiselectDropdown.getSelectedCount()"></span>\n        <span class="caret"></span>\n    </button>\n    <div class="dropdown-menu">\n        <input\n            type="text"\n            class="form-control"\n            ng-model="multiselectDropdown.search.label"\n            placeholder="{{ multiselectDropdown.text.search }}">\n        <ul class="dropdown-menu-list list-unstyled">\n            <li>\n                <a\n                    ng-bind="multiselectDropdown.text.deselectAll"\n                    ng-class="{ \'text-muted\': !multiselectDropdown.hasSelectedItems() }"\n                    ng-click="multiselectDropdown.deselectAll()">\n                </a>\n            </li>\n            <li class="divider" ng-if="!multiselectDropdown.isGrouped"></li>\n            <li\n                class="group-header"\n                ng-bind="group"\n                ng-if="multiselectDropdown.isGrouped && !multiselectDropdown.isGroupEmpty(group)"\n                ng-repeat-start="group in multiselectDropdown.groups">\n            </li>\n            <li ng-repeat="option in multiselectDropdown.optionsFiltered = (multiselectDropdown.options | amoMultiselectGroup : group | filter : multiselectDropdown.search)">\n                <a ng-click="multiselectDropdown.toggleSelectedState(option)">\n                    <input type="checkbox" ng-model="option.selected">\n                    <span ng-bind="option.label"></span>\n                </a>\n            </li>\n            <li ng-repeat-end></li>\n        </ul>\n    </div>\n</div>\n')}]);